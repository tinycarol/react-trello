{"version":3,"sources":["services/TrelloService.js","components/cards/Label.js","components/cards/Card.js","components/columns/Column.js","components/columns/Columns.js","components/Pepe.js","App.js","serviceWorker.js","index.js"],"names":["http","axios","create","baseURL","process","withCredentials","Label","props","text","className","children","replace","Card","title","labels","description","labelComps","id","position","map","label","index","key","length","Column","cards","cardComps","card","Columns","state","columns","error","undefined","redirect","get","then","res","data","setState","slice","catch","this","to","column","onClick","Component","Pepe","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wYAEMA,E,OAAOC,EAAMC,OAAO,CACzBC,QAASC,yCACTC,iBAAiB,ICQHC,G,MATD,SAACC,GACd,IAAuBC,EACvB,OACC,yBAAKC,UAAS,sBAFQD,EAEsBD,EAAMG,SAFnBF,EAAKG,QAAQ,IAAK,IAAIA,QAAQ,IAAK,OAGhEJ,EAAMG,YCSKE,G,MAZF,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,MAAoBC,GAA2B,EAAxCC,YAAwC,EAA3BD,QAC7BE,GADwD,EAAnBC,GAAmB,EAAfC,SAC5B,yBAAKT,UAAU,UAChCK,EAAOK,KAAI,SAACC,EAAOC,GAAR,OAAkB,kBAAC,EAAD,CAAOC,IAAKD,GAAQD,QAEnD,OACC,yBAAKX,UAAU,oCACbK,EAAOS,OAAS,EAAIP,EAAa,GAClC,yBAAKP,UAAU,aAAaI,MCGhBW,G,MAVA,SAAC,GAAwC,EAAtCP,GAAuC,IAAnCJ,EAAkC,EAAlCA,MAAkC,KAA3BK,SAA2B,EAAjBO,OAChCC,QADiD,MAAT,GAAS,GAC/BP,KAAI,SAAAQ,GAAI,OAAI,kBAAC,EAAD,eAAML,IAAKK,EAAKV,IAAQU,OAC5D,OACC,yBAAKlB,UAAU,UACd,yBAAKA,UAAU,eAAeI,GAC7Ba,K,eCHiBE,E,2MACpBC,MAAQ,CACPC,QAAS,GACTC,WAAOC,EACPC,UAAU,G,mFAGU,IAAD,OJNWjC,EAAKkC,IAAI,YAAYC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,QIOtDF,MACZ,SAAAL,GACC,EAAKQ,SAAS,CACbR,QAASA,EAAQS,MAAM,EAAG,SAG3BC,OACD,SAAAT,GAAK,OAAI,EAAKO,SAAS,CAAEP,MAAOA,S,iCAKjCU,KAAKH,SAAS,CAAEL,UAAU,M,+BAGjB,IAAD,OACR,GAAIQ,KAAKZ,MAAMI,SACd,OAAQ,kBAAC,IAAD,CAAUS,GAAG,UAEtB,IAAMZ,EAAUW,KAAKZ,MAAMC,QAAQX,KAAI,SAAAwB,GAAM,OAAI,kBAAC,EAAD,eAAQrB,IAAKqB,EAAO1B,IAAQ0B,OAC7E,OACC,yBAAKlC,UAAU,WACd,4BAAQmC,QAAS,kBAAM,EAAKX,aAA5B,YACCH,O,GA/BgCe,aCJtB,SAASC,IACvB,OACC,yBAAKrC,UAAU,QAAf,Q,ICeasC,E,iLAXX,OACE,yBAAKtC,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOuC,OAAK,EAACC,KAAK,IAAIC,UAAWtB,IACjC,kBAAC,IAAD,CAAOoB,OAAK,EAACC,KAAK,QAAQC,UAAWJ,U,GAN7BD,aCMEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OAAO,kBAAC,IAAD,KAAe,kBAAC,EAAD,OAAyBC,SAASC,eAAe,SDwH1E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,kB","file":"static/js/main.5cc01ce2.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst http = axios.create({\n\tbaseURL: process.env.REACT_APP_TRELLO_API || 'http://localhost:5000',\n\twithCredentials: false\n});\n\nexport const getColumns = () => http.get('/columns').then(res => res.data); \nexport const editColumn = (id, column) => http.patch(`/columns/${id}`, column).then(res => res.data); \nexport const deleteColumn = (id) => http.delete(`/columns/${id}`).then(res => res.data); \nexport const addColumn = (column) => http.post(`/columns`, column).then(res => res.data); \n\nexport const getCards = () => http.get('/cards').then(res => res.data); \nexport const editCard = (id, card) => http.patch(`/cards/${id}`, card).then(res => res.data); \nexport const deleteCard = (id) => http.delete(`/cards/${id}`).then(res => res.data); \nexport const addCard = (card) => http.post(`/cards`, card).then(res => res.data); \n","import React from 'react';\nimport './Label.css';\n\nconst Label = (props) => {\n\tconst transformText = (text) => text.replace(\" \", \"\").replace(\"!\", \"\");\n\treturn (\n\t\t<div className={`Label Label${transformText(props.children)}`}>\n\t\t\t{props.children}\n\t\t</div>\n\t)\n}\n\nexport default Label;","import React from 'react';\nimport Label from './Label';\nimport './Card.css';\n\nconst Card = ({ title, description, labels, id, position }) => {\n\tconst labelComps = <div className='Labels'>\n\t\t{labels.map((label, index) => <Label key={index}>{label}</Label>)}\n\t</div>;\n\treturn (\n\t\t<div className='Card navigable navigable-default'>\n\t\t\t{labels.length > 0 ? labelComps : ''}\n\t\t\t<div className='CardTitle'>{title}</div>\n\t\t</div>\n\t)\n}\n\nexport default Card;","import React from 'react';\nimport Card from '../cards/Card';\nimport './Column.css';\n\nconst Column = ({ id, title, position, cards = [] }) => {\n\tconst cardComps = cards.map(card => <Card key={card.id} {...card} />);\n\treturn (\n\t\t<div className=\"Column\">\n\t\t\t<div className=\"ColumnTitle\">{title}</div>\n\t\t\t{cardComps}\n\t\t</div>\n\t)\n}\n\nexport default Column;","import React, { Component } from 'react';\nimport { getColumns } from '../../services/TrelloService';\nimport Column from './Column';\nimport './Columns.css';\nimport { Redirect } from 'react-router-dom';\n\nexport default class Columns extends Component {\n\tstate = {\n\t\tcolumns: [],\n\t\terror: undefined,\n\t\tredirect: false\n\t};\n\n\tcomponentDidMount() {\n\t\tgetColumns().then(\n\t\t\tcolumns => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tcolumns: columns.slice(0, 10)\n\t\t\t\t})\n\t\t\t}\n\t\t).catch(\n\t\t\terror => this.setState({ error: error })\n\t\t);\n\t}\n\n\tredirect() {\n\t\tthis.setState({ redirect: true })\n\t}\n\n\trender() {\n\t\tif (this.state.redirect) {\n\t\t\treturn (<Redirect to=\"/pepe\" />)\n\t\t}\n\t\tconst columns = this.state.columns.map(column => <Column key={column.id} {...column} />)\n\t\treturn (\n\t\t\t<div className='Columns'>\n\t\t\t\t<button onClick={() => this.redirect()}>Redirect</button>\n\t\t\t\t{columns}\n\t\t\t</div>\n\t\t)\n\t}\n\n}","import React from 'react';\n\nexport default function Pepe() {\n\treturn (\n\t\t<div className='Pepe'>\n\t\t\tholi\n\t\t\t</div>\n\t)\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Columns from './components/columns/Columns';\nimport { Switch, Route } from 'react-router-dom';\nimport Pepe from './components/Pepe';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/\" component={Columns} />\n          <Route exact path=\"/pepe\" component={Pepe} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'font-awesome/css/font-awesome.min.css';\n\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}